// <autogenerated />
using System;
using System.Reflection;
[assembly: global::System.Runtime.Versioning.TargetFrameworkAttribute(".NETCoreApp,Version=v8.0", FrameworkDisplayName = ".NET 8.0")]

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Reflection.AssemblyCompanyAttribute("API-DB")]
[assembly: System.Reflection.AssemblyConfigurationAttribute("Debug")]
[assembly: System.Reflection.AssemblyFileVersionAttribute("1.0.0.0")]
[assembly: System.Reflection.AssemblyInformationalVersionAttribute("1.0.0+8aa8137de16b6861e1f145eaee7f823d7a2e94b4")]
[assembly: System.Reflection.AssemblyProductAttribute("API-DB")]
[assembly: System.Reflection.AssemblyTitleAttribute("API-DB")]
[assembly: System.Reflection.AssemblyVersionAttribute("1.0.0.0")]

// Generated by the MSBuild WriteCodeFragment class.


// <auto-generated/>
global using global::NUnit.Framework;
global using global::System;
global using global::System.Collections.Generic;
global using global::System.IO;
global using global::System.Linq;
global using global::System.Net.Http;
global using global::System.Threading;
global using global::System.Threading.Tasks;

using RestSharp;
using System.ComponentModel.DataAnnotations;
using API_DB.Models;

namespace API_DB.API
{
    public class ApiClient  // ⚡️ Renamed from APIClient → ApiClient
    {
        private readonly RestClient _client;

        public ApiClient()
        {
            _client = new RestClient();
        }

        public async Task<RestResponse> PostAsync(string url, object body)
        {
            var request = new RestRequest(url, Method.Post);
            request.AddHeader("Content-Type", "application/json");
            request.AddJsonBody(body);

            try
            {
                var response = await _client.ExecuteAsync(request);

                Log.Information("API Response: {StatusCode} {Content}", response.StatusCode, response.Content);

                // ⚡️ Handle error responses gracefully
                if (!response.IsSuccessful)
                {
                    Log.Error("API Request Failed! Status: {StatusCode}, Error: {ErrorMessage}",
                               response.StatusCode, response.ErrorMessage ?? "No Error Message");

                    throw new Exception($"API Request Failed: {response.StatusCode} - {response.ErrorMessage}");
                }

                return response;
            }
            catch (Exception ex)
            {
                Log.Error("Exception in ApiClient: {ExceptionMessage}", ex.Message);
                throw;  // ⚡️ Re-throw the exception so the test fails with useful info
            }
        }


    }
}


namespace API_DB.API
{
    public static class ApiEndpoints
    {
        public const string BaseUrl = "http://shop.bugred.ru/api/items";
        public const string CreateItem = $"{BaseUrl}/create/";
        public const string SelectItem = $"{BaseUrl}/select/";
        public const string DeleteItem = $"{BaseUrl}/delete/";
    }
}

using System.ComponentModel.DataAnnotations;
using RestSharp;


namespace API_DB.src.API
{
    public static class ResponseValidator
    {
        // ⚡️ CHANGE: Generic method to validate response against a model
        public static void ValidateResponse<T>(RestResponse response) where T : class
        {
            // ⚡️ ADD: Log the start of validation
            Log.Information("Starting validating the response against {ModelType}", typeof(T).Name);

            if (response.Content == null)
            {
                Log.Error("Response content is null."); // ⚡️ ADD: Log error
                throw new Exception("Response content is null.");
            }

            // Deserialize the response into the specified model
            T responseModel;
            try
            {
                responseModel = JsonConvert.DeserializeObject<T>(response.Content);
            }
            catch (JsonException ex)
            {
                Log.Error(ex, "Failed to deserialize response: {ErrorMessage}", ex.Message); // ⚡️ ADD: Log deserialization error
                throw new Exception($"Failed to deserialize response: {ex.Message}");
            }

            if (responseModel == null)
            {
                Log.Error("Deserialized response model is null."); // ⚡️ ADD: Log error
                throw new Exception("Deserialized response model is null.");
            }

            // Validate the model using data annotations
            var validationContext = new ValidationContext(responseModel);
            var validationResults = new List<ValidationResult>();
            bool isValid = Validator.TryValidateObject(responseModel, validationContext, validationResults, true);

            if (!isValid)
            {
                var errors = string.Join(", ", validationResults.Select(v => v.ErrorMessage));
                Log.Error("Response validation failed: {ValidationErrors}", errors); // ⚡️ ADD: Log validation errors
                throw new Exception($"Response validation failed: {errors}");
            }

            // ⚡️ ADD: Log successful validation
            Log.Information("Response validation succeeded for {ModelType}", typeof(T).Name);
        }
    }
}
using Microsoft.Extensions.Configuration;

namespace API_DB_Tests.Config
{
    public static class AppConfig
    {
        public static IConfigurationRoot Configuration { get; private set; }
        public static ErrorMessages ErrorMessages { get; private set; } // ⚡️ This is an instance, not a type

        static AppConfig()
        {
            Configuration = new ConfigurationBuilder()
                .SetBasePath(Directory.GetCurrentDirectory())
                .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
                .AddJsonFile("src/Config/errorMessages.json", optional: false, reloadOnChange: true) // ⚡️ Add errorMessages.json
                .Build();
            ErrorMessages = Configuration.GetSection("ErrorMessages").Get<ErrorMessages>();

            Log.Logger = new LoggerConfiguration()
                .ReadFrom.Configuration(Configuration)
                .CreateLogger();
        }

    }
}

using API_DB.Models;

namespace API_DB.Config
{
    public static class TestData
    {
        public static readonly CreateItemRequest CreateNewItem = new CreateItemRequest
        {
            Name = "Jeans",
            Section = "Test",
            Description = "Levis!",
            Color = "blue",
            Size = 42,
            Price = 30,
            Params = "slim"
        };
        public static readonly CreateItemRequest CreateNewItemNoName = new CreateItemRequest
        {
            Section = "Test",
            Description = "Levis!",
            Color = "blue",
            Size = 42,
            Price = 30,
            Params = "slim"
        };
    }
}

global using System;
global using System.Collections.Generic;
global using System.Linq;
global using System.Text;
global using System.Threading.Tasks;
global using Serilog;
global using Newtonsoft.Json;

using API_DB.src.Models;
using API_DB_Tests.Config;
using System.ComponentModel.DataAnnotations;

public class ConditionalMessageAttribute : ValidationAttribute
{
    protected override ValidationResult IsValid(object value, ValidationContext validationContext)
    {
        if (value is string message)
        {
            // Get the instance of the model being validated
            var model = validationContext.ObjectInstance as FailedCreateItemResult;

            if (model != null)
            {
                var errorMessages = AppConfig.ErrorMessages;
                // Check the error field and validate the message accordingly
                switch (model.ErrorField)
                {
                    case "name":
                        if (message != errorMessages.Name )
                        {
                            return new ValidationResult(errorMessages.Default);
                        }
                        break;

                    case "section":
                        if (message != errorMessages.Section)
                        {
                            return new ValidationResult(errorMessages.Default);
                        }
                        break;
                    case "description":
                        if (message != errorMessages.Description)
                        {
                            return new ValidationResult(errorMessages.Default); 
                        }
                        break;

                    default:
                        return new ValidationResult("Invalid error field.");
                }
            }
        }

        // If the message matches the expected value, return success
        return ValidationResult.Success;
    }
}
using System.ComponentModel.DataAnnotations;

namespace API_DB.Models
{
    public class CreateItemRequest
    {
        public string Name { get; set; }
        [Required(ErrorMessage = "Категория не найдена!")]
        public string Section { get; set; }
        public string Description { get; set; }
        public string Color { get; set; }
        public int Size { get; set; }
        public int Price { get; set; }
        public string Params { get; set; }
    }
}

using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace API_DB.src.Models
{
    public class CreateItemResponse
    {
        public string Method { get; set; }
        public string Status { get; set; }
        public CreateItemResult Result { get; set; }
    }

    public class CreateItemResult
    {
        [JsonProperty("id")]
        [Required]
        public int Id { get; set; }
        [Required]
        public string Name { get; set; }
        [Required]
        public string Section { get; set; }
        [Required]
        public string Description { get; set; }
        [Required]
        public string Color { get; set; }
        [Required]
        public int Price { get; set; }
        [Required]
        public string Params { get; set; }
    }
    public class FailedCreateItemResult
    {
        [JsonProperty("method")]
        [Required]
        public string Method { get; set; }
        [JsonProperty("status")]
        [Required]
        public string Status { get; set; }
        [Required]
        [JsonProperty("field_error")]
        public string ErrorField { get; set; }
        [Required]
        [JsonProperty("error")]
        public string Error { get; set; }
        [JsonProperty("message")]
        [Required]
        [ConditionalMessage]
        //[RegularExpression(@"^Название товара не заполнено!$", ErrorMessage = "Message value is invalid.")] // ⚡️ Exact value check
        public string Message { get; set; }
    }
}

namespace API_DB.Models
{
    public class DeleteItemRequest
    {
        public int Id { get; set; }
    }
}

namespace API_DB.Models
{
    public class DeleteItemResponse
    {
        public string Status { get; set; }
    }
}

public class ErrorMessages
{
    public string Name { get; set; }
    public string Section { get; set; }
    public string Description { get; set; }
    public string Default { get; set; }
}
using Newtonsoft.Json;

namespace API_DB.Models
{
    public class SelectItemRequest
    {
        [JsonProperty("sql_query")]
        public string Sql_Query { get; set; }
    }
}

using API_DB.Models;
using Newtonsoft.Json;

namespace API_DB.Models
{
    public class SelectItemResponse
    {
        public string Status { get; set; }
        [JsonProperty("result")]
        public List<SelectItemResult> Result { get; set; }
    }
}

using Newtonsoft.Json;

public class SelectItemResult
{
    [JsonProperty("last_id")]
    public int Id { get; set; }
    public string Title { get; set; }
    public int Price { get; set; }
    public string Description { get; set; }
    public string Params { get; set; }
}

using FluentAssertions;
using API_DB.Models;
using API_DB.API;
using API_DB.Config;
using API_DB.Utils;
using API_DB.src.Models;
using API_DB.src.API;



namespace API_DB.Tests
{
    public class ApiTests
    {
        private ApiClient _apiClient;

        [SetUp]
        public void Setup()
        {
            LoggerSetup.ConfigureLogging();
            _apiClient = new ApiClient();
            Log.Information("Test Setup Initialized");
        }

        [Test]
        public async Task Create_Select_Delete_Item_Test()
        {
            Log.Information("Starting Create_Select_Delete_Item_Test");

            try
            {
                var createResponse = await _apiClient.PostAsync(ApiEndpoints.CreateItem, TestData.CreateNewItem); 
                createResponse.StatusCode.Should().Be(System.Net.HttpStatusCode.OK);

                Log.Information("Create Item Response: {ResponseContent}", createResponse.Content);
                var createdItem = JsonConvert.DeserializeObject<CreateItemResponse>(createResponse.Content);
                createdItem.Status.Should().Be("ok");
                int itemId = createdItem.Result.Id;
                Log.Debug("Created Item ID: {ItemId}", itemId);

                var selectRequest = new SelectItemRequest { Sql_Query = $"SELECT * FROM items WHERE last_id = {itemId};" };
                string requestJson = JsonConvert.SerializeObject(selectRequest);
                var selectResponse = await _apiClient.PostAsync(ApiEndpoints.SelectItem, requestJson);
                selectResponse.StatusCode.Should().Be(System.Net.HttpStatusCode.OK);

                Log.Information("Select Item Response: {ResponseContent}", selectResponse.Content);
                var selectedItem = JsonConvert.DeserializeObject<SelectItemResponse>(selectResponse.Content);
                selectedItem.Status.Should().Be("ok");
                selectedItem.Result.Should().ContainSingle(item => item.Id == itemId);

                var deleteRequest = new DeleteItemRequest { Id = itemId };
                var deleteResponse = await _apiClient.PostAsync(ApiEndpoints.DeleteItem, deleteRequest); 
                deleteResponse.StatusCode.Should().Be(System.Net.HttpStatusCode.OK);

                Log.Information("Delete Item Response: {ResponseContent}", deleteResponse.Content);
                var deletedItem = JsonConvert.DeserializeObject<DeleteItemResponse>(deleteResponse.Content);
                deletedItem.Status.Should().Be("ok");
            }
            catch (Exception ex)
            {
                Log.Error("Test failed due to an exception: {ExceptionMessage}", ex.Message);
                Assert.Fail($"Test failed: {ex.Message}");
            }

            Log.Information("Test Create_Select_Delete_Item_Test completed successfully!");
        }

        [Test]
        public async Task Failed_Item_Creation_Test()
        {
            Log.Information("Starting Failed_Item_Creation_Test");

            try
            {
                var createResponse = await _apiClient.PostAsync(ApiEndpoints.CreateItem, TestData.CreateNewItemNoName);
                createResponse.StatusCode.Should().Be(System.Net.HttpStatusCode.OK);

                Log.Information("Create Item Response: {ResponseContent}", createResponse.Content);
                var failedItemCreation = JsonConvert.DeserializeObject<CreateItemResponse>(createResponse.Content);

                failedItemCreation.Status.Should().Be("error");
                ResponseValidator.ValidateResponse<FailedCreateItemResult>(createResponse);

            }
            catch (Exception ex)
            {
                Log.Error("Test failed due to an exception: {ExceptionMessage}", ex.Message);
                Assert.Fail($"Test failed: {ex.Message}");
            }

            Log.Information("Test Failed_Item_Creation_Test completed successfully!");
        }

    }
}

namespace API_DB.Utils
{
    public static class LoggerSetup
    {
        public static void ConfigureLogging()
        {
            Log.Logger = new LoggerConfiguration()
                .WriteTo.Console()    // ✅ Logs to Console
                .WriteTo.File("logs/test_log.txt", rollingInterval: RollingInterval.Day) // ✅ Logs to File
                .CreateLogger();
        }
    }

public static class Logger
    {
        public static void Info(string message) => Log.Information(message);
        public static void Error(string message) => Log.Error(message);
        public static void Debug(string message) => Log.Debug(message);
        public static void Warning(string message) => Log.Warning(message);
    }
}

